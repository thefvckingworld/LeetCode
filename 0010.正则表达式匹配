解题思路:
  有两个字符串(s和p字符串)匹配的问题，在实现过程中一般会涉及到s中的第i个与p中的第j个字符进行匹配。
  由此进行深入，假设s[0->i]与p[0->j]匹配，那么必然s[i]与p[j]前面的子串也是匹配的，故这里就有一个最优子结构。 

  所以本题优先思考动态规划的方式，不妨将dp[i][j]表示为s中的前i个与p中的前j个字符是否匹配。
  假设dp[i][j] = true(即匹配), 下面就状态转移分情况讨论：
  (1)若p[j]为'a'-'z', 则:
      dp[i - 1][j - 1] == true  && s[i] == p[j] 
      
  (2)若p[j]为'.', 则: 
      dp[i - 1][j - 1] == true
      
  (3)若p[j]为'*'(*前必跟着一个字符), 则:
      p[j - 1]可能匹配0次或1次或多次:
        如果匹配0次的情况:
          dp[i][j - 2] == true

        如果匹配1次的情况:
          dp[i - 1][j - 2] == true && s[i] == p[j - 1]

        如果匹配2次的情况:
          dp[i - 2][j - 2] == true && s[i] == p[j - 1] && s[i - 1] == p[j - 1]
        
        如果匹配n次的情况:
          dp[i - n][j - 2] == true && s[i] == p[j - 1] && s[i - 1] == p[j - 1] ... && ... s[i - n + 1] == p[j - 1]

  由以上分析, 状态转移方程为:
    dp[i][j] = 
        (1) dp[i - 1][j - 1] && p[j] > 'a' && p[j] < 'z' && s[i] == p[j]
        (2) dp[i - 1][j - 1] && p[j] == '.'
        (3) { k ∈ n |  dp[i - k][ j - 2] && p[j] == '*' && s[i - k + 1] == p[j - 1]}  // 特殊说明: 如果p[j - 1]是'.', 则满足任意字符
            对于第三种情况,需要继续进行分析优化, 先把第三种情况的写法简化一下(k次匹配):
            dp[i][j] = dp[i][j - 2] || (dp[i - 1][j - 2] && s[i] = p[j - 1]) || (dp[i - 2][j - 2] && s[i, i-1] = p[j - 1]) || ... || (dp[i - k][j - 2] && s[i...i - k + 1] = p[j - 1])
            
            优化思路:我们发现当k项不确定时，dp[i][j]的项也是不确定的，自然而然的想到使用类似于等差数列的概念，用dp[i][j]前的某一个项来代替掉后续k项，因为如dp[i - m][j - m]也肯定是类似的k项组成的。
            
            对于dp[i][j]匹配0次,  实际需要看dp[i][j - 2]
            对于dp[i][j]匹配1次,  实际相当于dp[i - 1][j] 匹配0次
            对于dp[i][j]匹配2次,  实际相当于dp[i -1 ][j] 匹配1次
            可得：对于dp[i][j]匹配k次,  实际相当于dp[i -1 ][j] 匹配k - 1次, 且匹配0次时，条件需要单列
            可得dp[i - 1][j] = dp[i - 1][j - 2] || (dp[i - 2][j - 2] && s[i - 1] = p[j - 1]) || ... || (dp[(i - 1) - (k - 1)][j - 2] && s[i - 1, i, ... (i - 1 - k + 1 + 1)] = p[j - 1])
            即: dp[i - 1][j] = dp[i - 1][j - 2] || (dp[i - 2][j - 2] && s[i - 1] = p[j - 1]) || ... || (dp[(i - k][j - 2] && s[i - 1, i, ... (i - k + 1)] = p[j - 1])
            观察dp[i][j]等式，抽取s[i] == p[j - 1]条件，可得:
            dp[i][j] = dp[i][j - 2] || (dp[i - 1][j] && s[i] == p[j - 1])

   故dp[i][j]最终的状态转移方程为:
        dp[i][j] = 
            (1) dp[i - 1][j - 1] && p[j] > 'a' && p[j] < 'z' && s[i] == p[j]
            (2) dp[i - 1][j - 1] && p[j] == '.'
            (3) [dp[i][j - 2] || (dp[i - 1][j] && s[i] == p[j - 1])]  &&  p[j] == '*'

  最后考虑实现上的问题, 尤其是边界条件, 综合考虑如下:
        1. 字符串需要考虑空串的情况
        2. 虽然dp[0][0] 能表示s[0->0] 与 p[0->0]是否匹配的情况，且下标刚好一一对应，但是这样一来，就无法表示两个空串匹配的情况
            所以，就需要考虑将s和p的字符映射到从1开始的下标，即dp[1][1] 表示s的第一个字符和p的第一个字符是否匹配。这样dp[0][0]就能表示空串了。
        3. 显然dp[0][0]必然匹配
        4. 因为考虑空串，所以dp[0][j] 和 dp[i][0]需要分别考虑(因为前面的分析推导都未考虑空串的情况)
           显然dp[i][0] 肯定是false。dp[0][j], 如果p[j] != '*' 肯定dp[0][j] = false, 如果p[j] == '*', dp[0][j] = dp[0][j - 2]
        5. 上述的状态转移方程中1和2可以合并, 后面的条件可以用一个函数，比如isMyEqual()来实现。

  遇到这种题目不要慌，耐心的一点一点分析下来，就能做出来。
  这题明显就是自顶向下分析，自底向上实现。

代码:

class Solution {
public:
	bool isMatch(string s, string p) {
		
		vector<vector<bool>> dp(s.length() + 1, vector<bool>(p.length() + 1, false));
		
		// 1.初始化空串情况、
		dp[0][0] = true;

		for (int i = 1; i < dp.size(); i++) {
			dp[i][0] = false;
		}

		for (int j = 1; j < p.length() + 1; j++) {
			if (p[j - 1] != '*') {
				dp[0][j] = false;
			}
			else {
				dp[0][j] = dp[0][j - 2];
			}
			
		}

		// 2.考虑一般情况
		for (int i = 1; i < dp.size(); i++) {
			for (int j = 1; j < dp[i].size(); j++) {
				
				int sCurrentCharIndex = i - 1;
				int pCurrentCharIndex = j - 1;

				if (p[pCurrentCharIndex] != '*') {
					dp[i][j] = dp[i - 1][j - 1] && isMyEqual(s[sCurrentCharIndex], p[pCurrentCharIndex]);
				}
				else {

					if (j - 2 >= 0) {
						dp[i][j] = dp[i][j - 2];
					}

					if (pCurrentCharIndex >= 0 && isMyEqual(s[sCurrentCharIndex], p[pCurrentCharIndex - 1])) {
						dp[i][j] = dp[i][j] || dp[i - 1][j];
					}
					
				}
			}
		}

		return dp[s.length()][p.length()];

	}

	bool isMyEqual(char sChar, char pChar) { // pChar必传入非星字符
		if (pChar == '.' || sChar == pChar) {
			return true;
		}

		return false;
	}

};
































