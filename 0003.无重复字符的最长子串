解题思路:
  这里的关键在于如何证明，在滑动过程中是能遍历全集的，应当这么想，所有的最长子串必然以某个字符为起点，那么只要遍历所有字符，检查这个字符开始的最长子串即可。
  另外一个关键在于当一个子串达到最大长度时，比如ri->rj,达到rj+1时重复，其中rj+1与某个rk重复，i < k < j,那么ri+1到rk是没有必要去检测的。
  最后一个关键在于，如何判断重复，可以利用哈希，比如set或者map等结构。

  以上的分析在实现后，就类似于滑动窗口一样，故名滑窗法，以后一定要以问题分析为主才行。


代码:
class Solution {
public:
	int lengthOfLongestSubstring(string s) {

		int max = 0;

		if (s.length() == 0 || s.length() == 1) {
			return s.length();
		}

		max = 1;

		unordered_map<char, int> map;

		int windowBegin = 0;
		int windowEnd = 0;

		while (windowBegin < s.length() && windowEnd < s.length()) {
			
			if (map.find(s[windowEnd]) == map.end()) {
				map[s[windowEnd]] = windowEnd;
			}
			else {
				// 略去那些不必要的子串(在滑窗法里叫作缩小窗口)
				int tempEnd = map[s[windowEnd]] + 1;
				
				while (windowBegin < tempEnd) {
					map.erase(s[windowBegin]);
					windowBegin++;
				}

				map[s[windowEnd]] = windowEnd;
			}
			
			if (max < windowEnd - windowBegin + 1) {
				max = windowEnd - windowBegin + 1;
			}

			windowEnd++;
		}

		return max;
	}
};



