解题思路:
  观察题目数据量可知，一定是一个复杂度小于O(n^2)的算法。
  接着往下观察，如果要盛水，必然在某两个柱子之间，另外一种理解是，必然以其中一个柱子为起点。
  所以暴力解法是，以某一点为起点，然后向右边延伸，找到最大的即可。(同时，可以观察到，陈水量，只与两端的柱子有关，与中间的柱子无关, 在遍历时，如果后面的柱子比前面的矮，则不需要再遍历)
  接着往下优化1: 看哪些能不进行遍历，假设两层循环是,一个是i,一个是j,则当h[i - 1] > h[i]时，不需要进入遍历,当h[j] < h[j + 1],不需要进入遍历
  接着往下优化2: 为了能在遍历时，不进行前向判断，而是遍历方向与要判断的数据一致，考虑将i固定在0处,将j固定在h_size - 1处,然后每移动一个i，遍历所有的j,这样就不要进行前向判断了。
                (到这里为止，还是两层循环)
  接着往下优化3: 两层循环的时候，对于i来说是找比之前大的那个进入，对局j来说，也是找比之前大的进入。
  接着往下优化4: 当i固定到某个值，j进行递减到下一个位置j - n，如果h(j) < h(i), 则i递进都无需再和h[j]进行比较，因为必然是更小的。对于i,也是同理。
	         也就是说，当确定某一端更小的时候，另外一段大的，就不需要再进行移动了，因为没有比较的意义。
  接着往下优化5: 当前的思路是，从两端进行遍历，并且在遍历时, i 和 j的选取总是选比之前大的才有意义。
		 结合优化4，在i和j遍历时，假设h(i) 比 h(j)小，则h(j)都不需要再和h(i)后面的进行比较。反过来，同理。
  接着往下优化6: 
		 现在考虑在两层循环下，i在第一层,j在第二次,选取h小的那一头后，本层就不需要再进行循环了，因为最优解一定不在其中。
		 细节展现在自己写的LeetCode题解中。


通过这一题所得到的一些解题思路:
	1.分析题目本身，得到一些特征
	2.模拟演算，分析过程，得到一些特征
	3.分析最终答案，或中间答案，得到一些特征


代码1(暴力解法，这段代码是能过的，做了一点优化，根据以上思路，但是还不是最优解法，本质还是O(n^2)):
class Solution {
public:
	int maxArea(vector<int>& height) {

		int maxS = 0;
		int maxBegin = -1;
		int maxEnd = -1;

		for (int i = 0; i < height.size(); i++) {

			if (maxBegin != -1 && height[i] <= height[maxBegin]) {
				continue;
			}

			for (int j = i + 1; j < height.size(); j++) {

				int minH = min(height[i], height[j]);

				int s = minH * (j - i);

				if (maxS < s) {
					maxS = s;
					maxBegin = i;
					maxEnd = j;
				}
			}
		}

		return maxS;
	}
};


代码2(最优解法,O(n)):
class Solution {
public:
	int maxArea(vector<int>& height) {
		int maxS = -1;
		int maxBegin = -1;
		int maxEnd = -1;

		int i = 0, j = height.size() - 1;

		while (i < j) {
			int currentS = (j - i) * min(height[j], height[i]);

			if (currentS > maxS) {
				maxS = currentS;
				maxBegin = i;
				maxEnd = j;
			}

			if (height[i] <= height[j]) {
				i++;
			}
			else {
				j--;
			}
		
		}

		return maxS;
	}
};



