解题思路:
  1.暴力解,复杂度是o(n^3)
  2.抽取一个数字，其实就变成了两数之和了。这样复杂度就是O(n^2),这题也能通过了
  3.有没有0(n)的算法? 答案是没有，官方题解就是o(n^2)

  
  两数之和有个缺点是空间复杂度较高，有没有同样的o(n^2)方，但是空间用的较少，答案是有的。
  思路还是抽取一个数字，然后剩余两个数字在剩余的数组中寻找。
  
  从暴力解开始:
  for (int i) {
    for (int j = i + 1) {
      for (int k = j + 1) {
        ...
      }
      
    }
  }

  从以上解可以知道，知道j,其实就知道了k，知道k，就知道了j在哪里，
  比如当j确定的时候，k也确定了.
  现在假设进入一个最优解，下次遍历，必然从k处开始的，比k大的完全无需遍历。这里就可以看到可以用双指针法。从指向两端开始，不停的缩小范围。
  假设在一个有序数组内，j和k分别指向两端，如果两数之和小于，则j++, 大于则k--,这样必能遍历所有的组合。(其实前面0011题的时候，双指针已经应用过了，其实也是在有序数组中进行操作的)
  





代码:
